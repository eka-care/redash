name: dev-cd
on:
  push:
    # Publish `prod-1.2.3` tags as releases.
    tags:
      - dev-*
env: 
  ECR_REPO_URL: ${{ secrets.DEV_ECR_REPO_URL }}
  NAMESPACE: ext-apps
  REDASH_SERVER: redash
  REDASH_ADHOCWORKER: redash-adhocworker
  REDASH_GENERICWORKER: redash-genericworker
  REDASH_SCHEDULEDWORKER: redash-scheduledworker
  REDASH_SCHEDULER: redash-scheduler
  
jobs:
  build-image: 
    runs-on: ubuntu-20.04
    environment: staging
    outputs:
      TAG: ${{ steps.get_tag.outputs.TAG }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}      
    steps:
      - uses: actions/checkout@v3

      - name: Get the version
        id: get_version
        run: echo VERSION=$(echo $GITHUB_REF | cut -d / -f 3) >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEV_AWS_Region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build docker images
        id: build_image
        env:
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |  
          docker build -t $ECR_REPO_URL/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .

          
      - name: Push image to Amazon ECR
        id: push_to_ecr
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Release info
        run: |
          echo ${{ github.action.release }}
          
      - name: Set up kubectl
        id: setup_kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/1.25.1/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
      - name: Get Existing Tag
        id: get_tag
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
        run: |
          touch /home/runner/.kube/config
          echo $KUBE_CONFIG_DATA > /home/runner/.kube/config
          echo TAG=`kubectl get deployment $REDASH_SERVER -n $NAMESPACE  -o=jsonpath='{$.spec.template.spec.containers[:1].image}' | awk -F':' '{print $2}'` >> $GITHUB_

  deploy-to-staging: 
    needs: build-image
    runs-on: ubuntu-20.04
    environment: staging
    steps:

      - name: deploy redash-server to staging cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        with:
          args: set image deployment/$REDASH_SERVER $REDASH_SERVER=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE

      - name: verify redash-server deployment to staging cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
        with:
          args: rollout status deployment/$REDASH_SERVER -n $NAMESPACE           

      - name: deploy redash-adhocworker to staging cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        with:
          args: set image deployment/$REDASH_ADHOCWORKER $REDASH_ADHOCWORKER=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE 


      - name: verify redash-adhocworker deployment to staging cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
        with:
          args: rollout status deployment/$REDASH_ADHOCWORKER -n $NAMESPACE

      - name: deploy redash-genericworker to staging cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        with:
          args: set image deployment/$REDASH_GENERICWORKER $REDASH_GENERICWORKER=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE 

      - name: verify redash-genericworker deployment to staging cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
        with:
          args: rollout status deployment/$REDASH_GENERICWORKER -n $NAMESPACE          

      - name: deploy redash-scheduledworker to staging cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        with:
          args: set image deployment/$REDASH_SCHEDULEDWORKER $REDASH_SCHEDULEDWORKER=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE 


      - name: verify redash-scheduledworker deployment to staging cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
        with:
          args: rollout status deployment/$REDASH_SCHEDULEDWORKER -n $NAMESPACE          

      - name: deploy redash-scheduler to staging cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        with:
          args: set image deployment/$REDASH_SCHEDULER $REDASH_SCHEDULER=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n $NAMESPACE 


      - name: verify redash-scheduler deployment to staging cluster
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
        with:
          args: rollout status deployment/$REDASH_SCHEDULER -n $NAMESPACE         

#   revert-on-failure: 
#     needs: deploy-to-staging
#     if: failure()
#     runs-on: ubuntu-20.04
#     environment: staging
#     steps:

#       - name: Reverting to Previous Tag
#         env: 
#           TAG: ${{ steps.get_tag.outputs.TAG }}
#         run: 
#           echo $TAG    

#       - name: deploy redash-server to staging cluster
#         uses: kodermax/kubectl-aws-eks@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           TAG: ${{ steps.get_tag.outputs.TAG }}

#         with:
#           args: set image deployment/$REDASH_SERVER $REDASH_SERVER=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG -n $NAMESPACE 


#       - name: verify redash-server deployment to staging cluster
#         uses: kodermax/kubectl-aws-eks@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
#         with:
#           args: rollout status deployment/$REDASH_SERVER -n $NAMESPACE

#       - name: deploy redash-adhocworker to staging cluster
#         uses: kodermax/kubectl-aws-eks@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           TAG: ${{ steps.get_tag.outputs.TAG }}

#         with:
#           args: set image deployment/$REDASH_ADHOCWORKER $REDASH_ADHOCWORKER=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG -n $NAMESPACE 


#       - name: verify redash-adhocworker deployment to staging cluster
#         uses: kodermax/kubectl-aws-eks@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
#         with:
#           args: rollout status deployment/$REDASH_ADHOCWORKER -n $NAMESPACE 


#       - name: deploy redash-genericworker to staging cluster
#         uses: kodermax/kubectl-aws-eks@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           TAG: ${{ steps.get_tag.outputs.TAG }}
#         with:
#           args: set image deployment/$REDASH_GENERICWORKER $REDASH_GENERICWORKER=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG -n $NAMESPACE 

#       - name: verify redash-genericworker deployment to staging cluster
#         uses: kodermax/kubectl-aws-eks@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
#         with:
#           args: rollout status deployment/$REDASH_GENERICWORKER -n $NAMESPACE 

#       - name: deploy redash-scheduledworker to staging cluster
#         uses: kodermax/kubectl-aws-eks@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           TAG: ${{ steps.get_tag.outputs.TAG }}
#         with:
#           args: set image deployment/$REDASH_SCHEDULEDWORKER $REDASH_SCHEDULEDWORKER=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG -n $NAMESPACE 


#       - name: verify redash-scheduledworker deployment to staging cluster
#         uses: kodermax/kubectl-aws-eks@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
#         with:
#           args: rollout status deployment/$REDASH_SCHEDULEDWORKER -n $NAMESPACE 

#       - name: deploy redash-scheduler to staging cluster
#         uses: kodermax/kubectl-aws-eks@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           TAG: ${{ steps.get_tag.outputs.TAG }}
#         with:
#           args: set image deployment/$REDASH_SCHEDULER $REDASH_SCHEDULER=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG -n $NAMESPACE 


#       - name: verify redash-scheduler deployment to staging cluster
#         uses: kodermax/kubectl-aws-eks@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.DEV_KUBE_CONFIG_DATA_EXTERNAL }}
#         with:
#           args: rollout status deployment/$REDASH_SCHEDULER -n $NAMESPACE 
